/*
  @author SillexLab (sillexlab@gmail.com)
  @copyright 2020

  main scripts
*/

$(window).on('load resize', function(e) {
	e.preventDefault();

	var viewPort = viewport(),
		windowWidth = viewPort.width;

	if (windowWidth <= '767') {

		$('.hamburger').bind('click', function() {
			var toggle = $(this).data('toggle');

			$('body').removeClass('sidebar-show settings-show');

			if ($(this).hasClass('is-active')) {
				$('body').removeClass(toggle);
				$(this).removeClass('is-active');
			} else {
				$('.hamburger').removeClass('is-active');
				$(this).addClass('is-active');
				$('body').addClass(toggle);
			}
		});

		$('.l-content').bind('click', function() {
			$('body').removeClass('sidebar-show settings-show');
			$('.hamburger').removeClass('is-active');
		});
	}
});

$(document).ready(function() {

	var viewPort = viewport(),
		windowWidth = viewPort.width,
		windowHeight = viewPort.height;


	// Functions
	loadMsg();
	retriveMsg();


	(function() {
		var check = $('.checkbox :checkbox');
		if (check.is(':checked')) {
			check.val(1);
		} else {
			check.val(0);
		}
	}());


	$('.checkbox :checkbox').on('change', function() {
		if ($(this).is(':checked')) {
			$(this).val(1);
		} else {
			$(this).val(0);
		}
	});


	$('.js-confirm-message').on('click', function(e) {
		e.preventDefault();

		var target = $(this).attr('href'),
			title = $(this).data('title'),
			type = $(this).data('type');

		if (typeof title === 'undefined') {
			title = 'Вы подтверждаете удаление?';
		}
		if (typeof type === 'undefined') {
			type = 'warning';
		}

		swal({
			title: title,
			type: type,
			showCancelButton: true,
			confirmButtonColor: '#ff3547',
			confirmButtonText: 'Удалить',
			cancelButtonText: 'Отмена',
			closeOnConfirm: true,
			closeOnCancel: true,
			html: false
		}, function(isConfirm) {
			if (isConfirm) {
				window.location = target;
			} else {
				return false;
			}
		});
	});


	// Ввод в поле только цифр
	$('.js-number').inputFilter(function(value) {
		return /^\d*$/.test(value);
	});

	// $(document).on('input', '.js-number', function(e) {
	// 	e.preventDefault();

	// 	this.value = this.value.replace(/[^0-9]/g, '');
	// });

	// Ввод в поле только цифр, точки и запятой
	$('.js-number-float').inputFilter(function(value) {
		return /^\d*[.,]?\d{0,2}$/.test(value);
	});
	// Заменяем запятую на точку
	$(document).on('input', '.js-number-float', function(e) {
		e.preventDefault();

		this.value = this.value.replace(/,/g, '.');
	});

	// $(document).on('input', '.js-number-float', function(e) {
	// 	e.preventDefault();

	// 	this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
	// });


	// Ввод в поле кол-во только цифры от 0
	$('.js-order-contenteditable').keyup(function(e) {
		e.preventDefault();
		var int = intval($(this).text()) || 0;
		$(this).text(int);
	});


	// Прячем / показываем sidebar
	$('.js-sidebar-toggle').on('click', function() {

		var hiddenState = $('.l-sidebar').hasClass('is_hidden') ? true : false;
		$('.l-sidebar').toggleClass('is_hidden');

		if ( ! hiddenState) {
			$('.l-container').toggleClass('is_hidden');
			$.cookie('hideSidebarState', 1, { expires: 1, path: '/admin' });
		} else {
			$('.l-container').toggleClass('is_hidden');
			$.removeCookie('hideSidebarState', { path: '/admin' });
		}
	});

});

/*
  @author SillexLab (sillexlab@gmail.com)
  @copyright 2020

  common scripts
*/

$(document).ready(function() {

	/**
	 * Place the CSRF token as a header on all pages for access in AJAX requests
	 */
	$.ajaxSetup({
		headers: {
			'X-CSRF-TOKEN': $csrfToken
		}
	});

	$('.js-order-contenteditable').on('blur', function() {
		var order = $(this).text(),
			id = $(this).data('id'),
			object = $(this).data('object'),
			json = {'id' : id, 'object': object, 'order' : order},
			url = $adminUrl +'/ajax/ordering_edit';

		$.post(url, json, function(response) {
			if (response.type === 'success') {
				window.location.reload();
			}
		});
	});


	$(document).on('submit', '#ajax-email-form', function(e) {
		e.preventDefault();

		var form = $(this);

		$.ajax({
			type: 'post',
			url: $adminUrl +'/feedback/store',
			data: form.serialize(),
			dataType: 'json',
			beforeSend: function() {
				$('#email-message').remove();
			},
			success: function(response, textStatus, xhr) {
				if (response.type === 'success') {
					form[0].reset();
					$('.modal').modal('hide');
					notifyAdd(response.message, 'success');
				} else {
					form.before('<div id="email-message" class="alert alert-'+ response.type +'">'+ response.message +'</div>');
				}
			},
			error: function(xhr, ajaxOptions, thrownError) {
				serverError(xhr, ajaxOptions, thrownError);
			}
		});
	});


	$(document).on('submit', '#set-meters-form', function(e) {
		e.preventDefault();

		var form = $(this)
			url = form.attr('action');

		$.ajax({
			type: 'post',
			url: url,
			data: form.serialize(),
			dataType: 'json',
			beforeSend: function() {
				$('#meters-message').remove();
			},
			success: function(response, textStatus, xhr) {
				if (response.type === 'success') {
					form[0].reset();
					$('.modal').modal('hide');
					notifyAdd(response.message, 'success');
					window.location.reload();
				} else {
					form.before('<div id="meters-message" class="alert alert-'+ response.type +'">'+ response.message +'</div>');
				}
			},
			error: function(xhr, ajaxOptions, thrownError) {
				serverError(xhr, ajaxOptions, thrownError);
			}
		});
	});


	$(document).on('submit', '#ajax-tariff-form', function(e) {
		e.preventDefault();

		var form = $(this);

		$.ajax({
			type: 'post',
			url: $adminUrl +'/registry/update',
			data: form.serialize(),
			dataType: 'json',
			beforeSend: function() {
				form.find('.has-spinner').buttonLoader('start');
				$('#email-message').remove();
			},
			success: function(response, textStatus, xhr) {
				form.find('.has-spinner').buttonLoader('stop');
				if (response.type === 'success') {
					form[0].reset();
					$('.modal').modal('hide');
					notifyAdd(response.message, 'success');
					window.location.reload();
				} else {
					form.before('<div id="email-message" class="alert alert-'+ response.type +'">'+ response.message +'</div>');
				}
			},
			error: function(xhr, ajaxOptions, thrownError) {
				form.find('.has-spinner').buttonLoader('stop');
				serverError(xhr, ajaxOptions, thrownError);
			}
		});
	});


	$('#my-notes').on('change', function(e) {
		var notes = $(this).val(),
			headerWidget = $(this).parents('.block').find('.block_header h2');

		if (notes.length > 0) {
			$.ajax({
				type: 'post',
				url: $adminUrl +'/ajax/ajax_save_notes',
				data: {'notes' : notes},
				dataType: 'json',
				beforeSend: function() {
					widgetMessage(headerWidget, 'Сохранение', 'warning');
				},
				success: function(response, textStatus, xhr) {
					if (response === 'error') {
						widgetMessage(headerWidget, 'Ошибка', 'danger');
					}
					widgetMessage(headerWidget, 'Сохранено', 'success');
					return true;
				},
				error: function(xhr, ajaxOptions, thrownError) {
					serverError(xhr, ajaxOptions, thrownError)
				}
			});
		}
	});


	$('.js-my-notes-clear').on('click', function(e) {
		e.preventDefault();

		var headerWidget = $(this).parents('.block').find('.block_header h2');

		if (confirmMessage()) {
			$.ajax({
				type: 'post',
				url: $adminUrl +'/ajax/ajax_save_notes',
				data: {'notes': ''},
				dataType: 'json',
				success: function(response, textStatus, xhr) {
					if (response === 'error') {
						widgetMessage(headerWidget, 'Ошибка', 'danger');
					}
					$('#my-notes').val('');
					return true;
				},
				error: function(xhr, ajaxOptions, thrownError) {
					serverError(xhr, ajaxOptions, thrownError)
				}
			});
		}
	});


	$(document).on('click', '.js-todo-add-action', function() {
		var newTodoId = (typeof newTodoId !== 'undefined') ? newTodoId : $(this).data('new-todo-id'),
			toAdd = $('.js-todo-add-input').val(),
			headerWidget = $(this).parents('.block').find('.block_header h2');

		if (toAdd === '') {
			widgetMessage(headerWidget, 'Добавьте задачу!', 'warning');
			return false;
		}

		$('.todo-items').append('<li class="todo-item" data-todo-id="'+ newTodoId +'"><div class="checkbox"><label><input type="checkbox" class="js-todo-item-checkbox"><span class="todo-item-title">' + toAdd + '</span></label></div><span class="todo-item-action-remove js-todo-item-action-remove">×</span></li>');

		$('.js-todo-add-input').val('');

		var json = {'title': toAdd, 'action': 'add'};
		$.post($adminUrl +'/ajax/ajax_todo', json, function(response) {
			widgetMessage(headerWidget, 'Добавлено', 'success');
			newTodoId++;
		});
		
	});


	$(document).on('keyup', '.js-todo-add-input', function(e) {
		if (e.keyCode === 13) {
			$('.js-todo-add-action').click();
		}
	});


	$(document).on('click', '.js-todo-item-action-remove', function() {
		if (confirmMessage()) {
			var todoItem = $(this).parents('.todo-item'),
				id = todoItem.data('todo-id'),
				headerWidget = $(this).parents('.block').find('.block_header h2');
			todoItem.fadeOut('slow');

			var json = {'id': id, 'action': 'delete'};
			$.post($adminUrl +'/ajax/ajax_todo', json, function(response) {
				widgetMessage(headerWidget, 'Удалено', 'success');
			});
		}
	});


	$('.js-todo-clear').on('click', function(e) {
		e.preventDefault();
		if (confirmMessage()) {
			$('.todo-item').fadeOut('slow');

			var json = {'action': 'clear'};
			$.post($adminUrl +'/ajax/ajax_todo', json);
		}
	});


	$(document).on('change', '.js-todo-item-checkbox', function() {
		var todoItem = $(this).parents('.todo-item'),
			id = todoItem.data('todo-id'),
			status = ($(this).is(':checked')) ? 1 : 0;
		
		todoItem.toggleClass('strike');

		var json = {'id': id, 'status': status, 'action': 'edit'};
		$.post($adminUrl +'/ajax/ajax_todo', json);
	});
	
	
	// Check unique the alias
	$('.js-check-unique-alias').on('input', function() {
		var url = $adminUrl +'/ajax/check_unique_alias',
			alias = $(this).val(),
			table = $(this).data('table'),
			id = $(this).data('id'),
			inputGroup = $(this).parent('.input-group'),
			label = '<label class="error">Такой "ЧПУ URL" уже существует! Он должен быть уникальным</label>',
			ths = $(this);
			
		ths.removeClass('error');
		if (inputGroup.length) {
			inputGroup.next('label.error').remove();
		} else {
			ths.next('label.error').remove();
		}
		
		$.post(
			url, {
				'id' : id,
				'alias' : alias,
				'table' : table
			}, function(response) {
				
				if (response.status === 'error') {
					ths.removeClass('valid');
					ths.addClass('error');
					
					if (inputGroup.length) {
						inputGroup.next('label.error').remove();
						inputGroup.after(label);
					} else {
						ths.next('label.error').remove();
						ths.after(label);
					}
				}
				
			}
		);
	});

});

/*
  @author SillexLab (sillexlab@gmail.com)
  @copyright 2020

  functions scripts
*/

// Вывод сообщений о подтверждении удаления
function confirmMessage(title, type) {

	if (typeof title === 'undefined') {
		title = 'Вы подтверждаете удаление?';
	}
	if (typeof type === 'undefined') {
		type = 'warning';
	}

	// Не работает, нужен promise
	// swal({
	//	title: title,
	//		type: type,
	//		showCancelButton: true,
	//		confirmButtonColor: '#ff3547',
	//		confirmButtonText: 'Удалить',
	//		cancelButtonText: 'Отмена',
	//		closeOnConfirm: true,
	//		closeOnCancel: true,
	//		html: false
	// }, function(isConfirm) {
	//		if (isConfirm) {
	//			return true;
	//		} else {
	//			return false;
	//		}
	// });
	// return false;
	
	if (confirm(title)) {
		return true;
	} else {
		return false;
	}
}

function loadMsg() {
	$.ajax({
		url: $siteUrl +'/ajax/loadMsg',
		dataType: 'json',
		success: function(response, textStatus, xhr) {
			if (response.status === 'on') {
				var msg = response.messages;
				$.each(msg, function(type, value) {
					if (value.length > 0) {
						if (value.length > 1 ) {
							var content = '';
							$.each(value, function(key, val) {
								content += val +'<br/>';
							});
						} else {
							var content = value;
						}
						notifyAdd(content, type);
					}
				});
			}
		},
		global: false
	});
}
function retriveMsg() {
	$(document).ajaxStop(function() {
		loadMsg();
	});
}


// Транслитерация заголовка
function transliteTitle(from, to, id) {
	var url = $adminUrl +'/ajax/translite_title',
		str = $(from).val();

	if (str === '') {
		notifyAdd('Сначала нужно ввести название', 'info');
		return false;
	}

	$.post(
		url, {
			'str' : str,
			'id' : id,
			'_token': $csrfToken
		}, function(response) {
			$(to).val(response);
		}
	);
}


// Вывод ответа от сервера при ошибке ajax запроса
function serverError(xhr, ajaxOptions, thrownError) {
	var errorContainer = $('#server_error'),
		errorText = '';
	errorContainer.remove();
	errorText = xhr.status === 0 ? 'Not connect.\n Verify Network.' : xhr.status === 404 ? 'Requested page not found. [404]' : xhr.status === 500 ? 'Internal Server Error [500].' : ajaxOptions === 'parsererror' ? 'Requested JSON parse failed.' : ajaxOptions === 'timeout' ? 'Time out error.' : ajaxOptions === 'abort' ? 'Ajax request aborted.' : 'Uncaught Error.\n' + xhr.responseText;
	$('body').append('<div id="server_error" class="server_error">' + errorText + '<\/div>');
	errorContainer.fadeIn(1e3).delay(1e3).fadeOut(3000, function() {
		errorContainer.remove();
	});
}


// Вывод оповещения в header блока или виджета
function widgetMessage(headerWidget, message, type) {
	headerWidget.find('.js-widget-message').remove();
	headerWidget.append('<span class="js-widget-message badge badge-'+ type +'">'+ message +'</span>');

	setTimeout(function() {
		$('.js-widget-message').animate({'opacity':'0'}, 'slow', '', function() {
			this.remove();
		}
	)}, 1000);
}


/**
 * notifyAdd
 * @example notifyAdd('Hello world', 'success');
 */
function notifyAdd(content, type) {
	Messenger.options = {
		extraClasses: 'messenger-fixed messenger-on-top messenger-on-right',
		theme: 'air'
	}
	Messenger().post({
		message: content,
		type: type,
		hideAfter: 10,
		showCloseButton: true
	});
}


/** 
 * функция заменяет get-параметр в строке параметров uri
 * (либо добавляет, либо удаляет, если передать val='')
 */
function setAttr(prmName, val) {
	var res = '',
		h = $uri.split('#'),
		d = h[0].split('?'),
		base = d[0],
		query = d[1];

	if (query) {
		var params = query.split('&');
		for (var i = 0; i < params.length; i++) {
			var keyval = params[i].split('=');

			if (keyval[0] !== prmName) {
				res += params[i] + '&';
			}
		}
	}
	if (val !== '') res += prmName + '=' + val;
	return base + '?' + res;
}

// userAgent
if (!window._ua) {
	var _ua = navigator.userAgent.toLowerCase();
}
const browser = {
	version: (_ua.match(/.+(?:me|ox|on|rv|it|era|opr|ie)[\/: ]([\d.]+)/) || [0, '0'])[1],
	opera: (/opera/i.test(_ua) || /opr/i.test(_ua)),
	vivaldi: /vivaldi/i.test(_ua),
	msie: (/msie/i.test(_ua) && !/opera/i.test(_ua) || /trident\//i.test(_ua)) || /edge/i.test(_ua),
	msie6: (/msie 6/i.test(_ua) && !/opera/i.test(_ua)),
	msie7: (/msie 7/i.test(_ua) && !/opera/i.test(_ua)),
	msie8: (/msie 8/i.test(_ua) && !/opera/i.test(_ua)),
	msie9: (/msie 9/i.test(_ua) && !/opera/i.test(_ua)),
	msie_edge: (/edge/i.test(_ua) && !/opera/i.test(_ua)),
	mozilla: /firefox/i.test(_ua),
	chrome: /chrome/i.test(_ua) && !/edge/i.test(_ua),
	safari: (!(/chrome/i.test(_ua)) && /webkit|safari|khtml/i.test(_ua)),
	iphone: /iphone/i.test(_ua),
	ipod: /ipod/i.test(_ua),
	iphone4: /iphone.*OS 4/i.test(_ua),
	ipod4: /ipod.*OS 4/i.test(_ua),
	ipad: /ipad/i.test(_ua),
	android: /android/i.test(_ua),
	bada: /bada/i.test(_ua),
	mobile: /iphone|ipod|ipad|opera mini|opera mobi|iemobile|android/i.test(_ua),
	msie_mobile: /iemobile/i.test(_ua),
	safari_mobile: /iphone|ipod|ipad/i.test(_ua),
	opera_mobile: /opera mini|opera mobi/i.test(_ua),
	opera_mini: /opera mini/i.test(_ua),
	mac: /mac/i.test(_ua),
	search_bot: /(yandex|google|stackrambler|aport|slurp|msnbot|bingbot|twitterbot|ia_archiver|facebookexternalhit)/i.test(_ua)
};

// helpers
function rand(mi, ma) {
	return Math.random() * (ma - mi + 1) + mi;
}

function irand(mi, ma) {
	return Math.floor(rand(mi, ma));
}

function sxRand() {
	return Math.round(rand(0, 100));
}

function isFunction(obj) {
	return Object.prototype.toString.call(obj) === '[object Function]';
}

function isArray(obj) {
	return Object.prototype.toString.call(obj) === '[object Array]';
}

function isObject(obj) {
	return Object.prototype.toString.call(obj) === '[object Object]' && !(browser.msie8 && obj && obj.item !== 'undefined' && obj.namedItem !== 'undefined');
}

function isEmpty(o) {
	if (Object.prototype.toString.call(o) !== '[object Object]') {
		return false;
	}
	for (let i in o) {
		if (o.hasOwnProperty(i)) {
			return false;
		}
	}
	return true;
}

function sxNow() {
	return +new Date;
}

function sxImage() {
	return window.Image ? (new Image()) : ce('img');
} // IE8 workaround

function trim(text) {
	return (text || '').replace(/^\s+|\s+$/g, '');
}

function stripHTML(text) {
	return text ? text.replace(/<(?:.|\s)*?>/g, '') : '';
}

function escapeRE(s) {
	return s ? s.replace(/([.*+?^${}()|[\]\/\\])/g, '\\$1') : '';
}

function intval(value) {
	if (value === true) return 1;
	return parseInt(value) || 0;
}

function floatval(value) {
	if (value === true) return 1;
	return parseFloat(value) || 0;
}

function inArray(elem, arr, i) {
	return arr === null ? -1 : indexOf.call(arr, elem, i);
}

function positive(value) {
	value = intval(value);
	return value < 0 ? 0 : value;
}

function winToUtf(text) {
	return text.replace(/&#(\d\d+);/g, function(s, c) {
		c = intval(c);
		return (c >= 32) ? String.fromCharCode(c) : s;
	}).replace(/&quot;/gi, '"').replace(/&lt;/gi, '<').replace(/&gt;/gi, '>').replace(/&amp;/gi, '&');
}

function replaceEntities(str) {
	return se('<textarea>' + ((str || '').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;')) + '</textarea>').value;
}

function clean(str) {
	return str ? str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;') : '';
}

function unclean(str) {
	return replaceEntities(str.replace(/\t/g, "\n"));
}


// Запуск ф-ции после окончания
// рендеринга предыдущего задания (вместо setTimeOut)
// См. у Дм. Лаврика - Javascipt и анимации - взаимодействие с CSS
//
//  raf(function() {
//	$(class).addClass('qwerty');
//  });
function raf(fn) {
	window.requestAnimationFrame(function() {
		window.requestAnimationFrame(function() {
			fn();
		});
	});
}


// Display all property and
// methods of object
function printObject(obj) {
	let res = '<ul>';

	for (i in obj) {
		res += '<li><strong>' + i + '</strong>: ' + obj[i] + '</li>';
	}
	res += '<ul>';
	document.write(res);
}


// Random integer
// between min и max
function mtRand(min, max) {
	return Math.floor(Math.random() * (max - min + 1));
}


// Return real screen width
function viewport() {
	let e = window, a = 'inner';
	if (!('innerWidth' in window)) {
		a = 'client';
		e = document.documentElement || document.body;
	}
	return {width: e[a + 'Width'], height: e[a + 'Height']};
}


// Прижимаем футер к низу,
// для браузеров, которые не поддерживают flex
(function fixFlex() {
	let obj = document.body || document.documentElement,
		s = obj.style,
		wrapper = $('.l-wrapper');

	// Прекращаем выполнение, если браузер поддерживает flex
	if (s.webkitFlexWrap === '' || s.msFlexWrap === '' || s.flexWrap === '') {
		return true;
	}
	// Обнуляем отступ
	wrapper.css('paddingBottom', 0);

	let footerH = $('.l-footer').outerHeight(),
		topH = $('.l-header').outerHeight(),
		widH = $(window).height(),
		sum = footerH + topH + wrapper.outerHeight(),
		padding = widH - sum;

	if (widH > sum) {
		wrapper.css('paddingBottom', padding);
	} else {
		wrapper.css('paddingBottom', 0);
	}
}());

/*
	@author SillexLab (sillexlab@gmail.com)
	@copyright 2020

	jQuery plugins
*/

// Avoid `console` errors in browsers that lack a console.
(function() {
	var method;
	var noop = function() {};
	var methods = [
		'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
		'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
		'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
		'timeStamp', 'trace', 'warn'
	];
	var length = methods.length;
	var console = (window.console = window.console || {});

	while (length--) {
		method = methods[length];

		// Only stub undefined methods.
		if (!console[method]) {
			console[method] = noop;
		}
	}
}());

(function($) {
	$.fn.buttonLoader = function(action, textBtn) {
		var self = $(this);
		if (action === 'start') {
			if ($(self).attr('disabled') === 'disabled') {
				return false;
			}

			if (typeof textBtn === 'undefined') {
				textBtn = 'Подождите';
			}
			$(self).attr('disabled', 'disabled');
			$(self).attr('data-btn-text', $(self).text());
			$(self).html('<span class="spinner"><i class="fa fa-spinner fa-spin"></i></span> ' + textBtn);
			$(self).addClass('active');
		}
		if (action === 'stop') {
			$(self).html($(self).attr('data-btn-text'));
			$(self).removeClass('active');
			$(self).removeAttr('disabled');
		}
	}
})(jQuery);

// Restricts input for each element in the set of matched elements to the given inputFilter.
// Example: https://jsfiddle.net/emkey08/tvx5e7q3
(function($) {
	$.fn.inputFilter = function(inputFilter) {
		return this.on("input keydown keyup mousedown mouseup select contextmenu drop", function() {
			if (inputFilter(this.value)) {
				this.oldValue = this.value;
				this.oldSelectionStart = this.selectionStart;
				this.oldSelectionEnd = this.selectionEnd;
			} else if (this.hasOwnProperty("oldValue")) {
				this.value = this.oldValue;
				this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
			} else {
				this.value = "";
			}
		});
	};
}(jQuery));

// Place any jQuery/helper plugins in here.

$(document).ready(function() {
	
	$('.validate').validate();

	$('[data-toggle="popover"]').popover();
	$('[data-toggle="tooltip"]').tooltip();

	$('.js-scroll').slimscroll({
		height: 'auto',
		size: '5px',
		alwaysVisible: true,
		railVisible: true
	});

	$('.block').widgster({bodySelector: '.block_body'});

	$('time.timeago').timeago();

	// close modal on key ESC
	$(document).on('keyup', function(e) {
		if (e.keyCode === 27) {
			$('.modal').modal('hide');
		}
	});

	// header bug fix
	$('.modal').on('show.bs.modal', function(e) {
		$('.l-header .header').css('marginRight', 2);
	});
	$('.modal').on('hidden.bs.modal', function(e) {
		$('.l-header .header').css('marginRight', -15);
	});
});

(function(window, undefined) {
	'use strict';

	var // Localise globals
		document = window.document,
		$ = window.$,
		SX = window.SX = window.SX || {};

	SX.Ajax = {
		/*
		 * Hold the last context that was set by the request.
		 * In most case, it will refer to a DOM element that trigger the request.
		 * Best use for debugging a response from SX.Ajax.request function.
		 */
		lastContext: undefined,
		/**
		 * Perform an Ajax request
		 * The response will be handled by CI.Ajax.response function
		 * url: the URL to which the request is sent
		 * settings: settings for $.ajax() function (optional)
		 */
		request: function(url, settings) {
			settings = settings || {};
			var context = settings.context || this;

			settings = $.extend({
				async: true,
				cache: false,
				dataType: 'json',
				type: 'GET',
				success: function(data) {
					SX.Ajax.response.call(context, data);
				}
			}, settings);
			$.ajax(url, settings);
		},
		/**
		 * Handle JSON data responded from CI.Ajax.request function
		 * data: JSON data
		 *		contains array of scripts to be executed
		 */
		response: function(data) {
			var data = data || {},
				context = this;
			SX.Ajax.lastContext = context;

			if (typeof data.scripts === 'undefined') {
				return;
			}

			// Execute all scripts from the response
			for (var i = 0, length = data.scripts.length; i < length; i++) {
				try {
					(new Function(data.scripts[i])).call(context);
				} catch(ex) {
					console.log(ex);
				}
			}
		}
	};

	SX.Script = $.extend({
		// Store all of the scripts that were randomly placed inside the page's body
		// to be executed later after the page was completely rendered
		queue: [],
		// List of Javascript files that were already loaded
		// by the SX.Script.require function
		loadedFiles: {},

		/**
		 * Load Javascript files if they were not loaded, then execute them
		 * file: string or array of string
		 * callback: function
		 */
		require: function(file, callback) {
			var self = this,
				files = (file instanceof Array) ? file : [file],
				// List of Javascript files that were not loaded
				unloadedFiles = [],
				// List of functions that will be executed to load the Javascript file
				functions = [];

			// Prepare list of Javascript files that need to be loaded
			for (var i = 0; i < files.length; i++) {
				if (typeof files[i] === 'string' || files[i] instanceof String) {
					// Check if the file was loaded or not
					if ( ! self.loadedFiles.hasOwnProperty(files[i])) {
						unloadedFiles.push(files[i]);
						functions.push($.ajax({
							dataType: "script",
							cache: true,
							url: files[i]
						}));
					}
				}
			}

			if (unloadedFiles.length > 0) {
				// Check if $() is ready
				functions.push($.Deferred(function(deferred) {
					$(deferred.resolve);
				}));

				// Trigger callback after all Javascript files were loaded completely (random order)
				$.when.apply(self, functions).done(function() {
					for (var j = 0; j < unloadedFiles.length; j++) {
						// Mark as loaded
						self.loadedFiles[unloadedFiles[j]] = true;
					}
					callback();
				});
			} else {
				// If all Javascript files were already loaded,
				// trigger callback right away
				callback();
			}
		}
	}, SX.Script);

	$(function() {

		// Ajaxify links
		$(document).on('click', '.js-modal', function(e) {
			var $a = $(this),
			url = $a.data('remote'),
			data = $a.data(),
			no_loading = $a.attr('data-no-loading');

			if (typeof url === 'undefined') {
				e.preventDefault();
				return;
			}

			// Close opened modal
			$('.modal').modal('hide');

			SX.Ajax.request(url, {
				context: this,
				data: data,
				beforeSend: function() {
					if ($a.data('disabled')) {
						return false;
					}
					if (typeof no_loading === 'undefined') {
						// loadingStart();
					}
					// Disable this DOM element
					// before performing an Ajax request
					$a.data('disabled', true).addClass('disabled');
				},
				complete: function() {
					// Enable when the request finished
					// loadingEnd();
					$a.data('disabled', false).removeClass('disabled');
				}
			});
			return false;
		});
	});

	// Execute queued scripts
	(function(queue) {
		for (var i = 0, length = queue.length; i < length; i++) {
			if (typeof queue[i] === 'function') {
				queue[i]();
			}
		}
	})(SX.Script.queue);
})(window);